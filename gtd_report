#!/usr/local/bin/ruby -ws

require 'net/imap'
require 'time'

class Net::IMAP
  def dates(*names)
    result = {}
    names.each do |name|
      self.examine(name)
      n = @responses["EXISTS"][-1]
      result[name] = (n == 0) ? [] : self.fetch(1..-1, "INTERNALDATE").map { |d|
        Time.parse(d.attr["INTERNALDATE"]).to_i
      }.sort
    end
    result
  end
end

module Enumerable
  def sum
    self.inject(0.0) { |t,n| t+=n }
  end
  def avg
    self.sum / self.size
  end
end

class Numeric
  def as_days
    (self / 86400.0).round
  end
end

$f ||= false
$m ||= !$f

raise "Can't do both yet" if $m and $f

if $m then
  # Net::IMAP::debug = true
  imap = Net::IMAP.new('greed.zenspider.com')
  path = File.expand_path("~/.imaprc")

  raise "fix the perms on #{path}" unless ((File.stat(path).mode % 01000) & 0077) == 0
  passwd = File.read(path).chomp

  imap.authenticate('CRAM-MD5', 'ryand', passwd)
  boxen = imap.list("", "GTD/@%").map { |m| m.name }.grep(/@[123]/) + [ "INBOX" ]
  data = imap.dates(*boxen)
  imap.disconnect
end

if $f then
  data = Hash.new { |h,k| h[k] = [] }
  Dir.chdir File.expand_path("~/Desktop") do
    Dir["@*"].each do |dir|
      Dir.chdir dir do
        Dir["*"].each do |file|
          data[dir] << File.mtime(file).to_i
        end
        data[dir].sort!
      end
    end
  end
end

p data if defined? $v

flat_dates = data.values.flatten
count = flat_dates.size
oldest = flat_dates.min
days = (Time.now.to_i - oldest).as_days
avg = flat_dates.avg

msg = "My backlog is currently #{count} items over #{days} days (avg #{Time.at(avg).strftime("%Y-%m-%d")})"

unless defined? $s then

  puts
  today = Time.now.to_i

  total = 0
  format = "%Y-%m-%d"
  data.sort_by { |b,t| b.sub(/GTD\/@/, 'z') }.each do |box, times|
    name = box.split(/\//).last
    unless times.empty? then
      last_date = Time.at(times.first)
      days = (today - last_date.to_i).as_days
      count = times.size
      avg = Time.at(times.avg).strftime(format)
      priority = 1
      priority = $1.to_i if name =~ /@([123])/
      threshold = case priority
                  when 1: $m ?  3 : 30
                  when 2: $m ?  8 : 60
                  else    $m ? 28 : 90
                  end
      cutoff = (Time.now - 86400 * threshold).to_i
      old, new = times.partition { |t| t < cutoff }
      units = old.map { |t| (today - t).as_days }.map { |d| d / threshold }
      score = -units.sum.to_i + (new.size * threshold * 0.5).to_i
      total += score
      printf "%-12s %4d items = %4d pts: %4d days %s (avg %s)\n", name, count, score, days, last_date.strftime(format), avg
    else
      printf "%-12s      empty\n", name
    end
  end

  msg << " scoring #{total} pts"
end

msg << "."
puts
puts msg

if defined? $u then
  rootpath = "/tmp/sig"
  File.open(rootpath + ".txt", "w") do |f|
    f.puts "--"
    f.puts msg
  end
  system "textutil -convert webarchive #{rootpath}.txt"
  system "cp #{rootpath}.webarchive /Users/ryan/Library/Mail/Signatures/36A0A9B3-878C-451C-BD35-1095247EEC7D.webarchive"
end
