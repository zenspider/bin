#!/usr/bin/env ruby -ws

$q ||= false
$d ||= false

require "date"
require "fileutils"

# backup_dates - returns a list of dates of backups to keep
#
# 28   days of dailies          1 month
#  2 months of weeklies         3 months
#  9 months of monthlies       12 months / 1 year
#  9  years of yearlies        10 years

def backup_dates
  today = Date.today
  day = Date.today

  days = 28.times               # 28 days / 4 weeks
    .map { |n| today - n }
    .sort
    .reverse
  day = days.last

  weeks = 2.times               # + 8 weeks = 3 months
    .flat_map { |n|
      day = today - 28 * (n+1)
      [1, 8, 15, 22].map { |d| Date.civil(day.year, day.month, d) }
    }
    .sort
    .reverse
  day = weeks.last

  months = 9.times              # + 9 months = 12 months
    .map {
      day -= 1
      day = Date.civil(day.year, day.month, 1)
    }
    .sort
    .reverse
  day = months.last

  years = 9.times              # + 9 years = 10 years
    .map {
      day -= 1
      day = Date.civil(day.year, 1, 1)
    }
    .sort
    .reverse

  return days, weeks, months, years
end

d, w, m, y = backup_dates
keep = [d, w, m, y].flatten.uniq.sort

if ARGV.empty? then
  puts "Daily: (%d)" % [d.size]
  puts d.each_slice(7).map { |a| a.join(" ") }
  puts
  puts "Weekly: (%d)" % [w.size]
  puts w.each_slice(4).map { |a| a.join(" ") }
  puts
  puts "Monthly: (%d)" % [m.size]
  puts m.each_slice(1).map { |a| a.join(" ") }
  puts
  puts "Yearly: (%d)" % [y.size]
  puts y.each_slice(1).map { |a| a.join(" ") }
else
  all = Dir[*ARGV].
    sort_by { |f| -File.mtime(f).to_f }.
    map { |f| [f, File.mtime(f).to_date] }.
    to_h

  good = keep.map { |t0| all.values.min_by { |t1| (t0 - t1).abs } }.uniq
  bad  = all.select { |_, t| not good.include? t }

  if $d then
    bad = bad.map(&:first)

    bad_files, bad_dirs = bad.partition { |f| File.file? f }

    deleted = File.unlink(*bad_files)

    puts "Deleted #{deleted} files" unless deleted.zero? unless $q

    FileUtils.rm_r bad_dirs

    puts "Deleted #{bad_dirs.size} directories" unless $q
  else
    puts "Deleted #{bad.size} files (no-op)"
    puts
    puts bad.keys.sort
  end
end
