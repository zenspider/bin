#!/usr/bin/env ruby -ws

$d ||= false

require "date"
require "fileutils"

# backup_dates - returns a list of dates of backups to keep
#
# 28   days of dailies
#  3 months of weeklies
#  9 months of monthlies
# 10  years of yearlies

def backup_dates
  day = Date.today
  dates = []

  goal = day - 28               # back 28 days

  (goal..day).each do |d|       # dailies 28+ days
    dates << d
  end

  day = goal - 1
  3.times do                    # weeklies for 3 months
    day = Date.civil(day.year, day.month, 1)
    dates << day
    dates << Date.civil(day.year, day.month, 8)
    dates << Date.civil(day.year, day.month, 15)
    dates << Date.civil(day.year, day.month, 22)
    day -= 1
  end

  9.times do # monthlies for 9+ months
    day = Date.civil(day.year, day.month, 1)
    dates << day
    day -= 1
  end

  10.times do                   # yearlies for 10 years
    day = Date.civil(day.year, 1, 1)
    dates << day
    day -= 1
  end

  return dates.uniq.sort
end

keep = backup_dates

if ARGV.empty? then
  y, m, w, d = keep[0..9], keep[10..18], keep[19..-29], keep[-28..-1]

  puts "Yearly:"
  puts y.each_slice(5).map { |a| a.join(" ") }
  puts
  puts "Monthly:"
  puts m.each_slice(5).map { |a| a.join(" ") }
  puts
  puts "Weekly:"
  puts w.each_slice(4).map { |a| a.join(" ") }
  puts
  puts "Daily:"
  puts d.each_slice(5).map { |a| a.join(" ") }
else
  all = Dir[*ARGV].
    sort_by { |f| -File.mtime(f).to_f }.
    map { |f| [f, File.mtime(f).to_date] }.
    to_h

  good = keep.map { |t0| all.values.min_by { |t1| (t0 - t1).abs } }.uniq
  bad  = all.select { |_, t| not good.include? t }

  if $d then
    deleted = File.unlink(*bad.map(&:first))

    puts "Deleted #{deleted} files"
  else
    puts "Deleted #{bad.size} files (no-op)"
    puts
    puts bad.keys.sort
  end
end
