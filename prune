#!/usr/bin/env ruby -ws

require 'date'
require 'fileutils'

# backup_dates - returns a list of dates of backups to keep
#
# 28 previous dailies
# 3 months of weeklies
# 9 months of monthlies
# 10 years of yearlies

def backup_dates
  day = Date.today
  dates = []

  goal = day - 28               # back 28 days

  (goal..day).each do |d|       # dailies 28+ days
    dates << d
  end

  day = goal - 1
  3.times do                    # weeklies for 3 months
    day = Date.civil(day.year, day.month, 1)
    dates << day
    dates << Date.civil(day.year, day.month, 8)
    dates << Date.civil(day.year, day.month, 15)
    dates << Date.civil(day.year, day.month, 22)
    day -= 1
  end

  9.times do # monthlies for 9+ months
    day = Date.civil(day.year, day.month, 1)
    dates << day
    day -= 1
  end

  10.times do                   # yearlies for 10 years
    day = Date.civil(day.year, 1, 1)
    dates << day
    day -= 1
  end

  return dates.uniq.sort
end

keep = backup_dates

$d ||= false
$o ||= false

death = {}

ARGV.each do |path|
  d = Date.civil(*File.mtime(path).to_a[3..5].reverse)
  if not keep.include? d or ($o and death[d]) then
    puts path
    FileUtils.rm_rf path if $d
  elsif $o
    death[d] = true
  end
end

if ARGV.empty? then
  require 'pp'

  # y1, y2, m1, m2, m3

  keep.map!(&:to_s)

  y, m, w, d = keep[0..9], keep[10..18], keep[19..-29], keep[-28..-1]

  puts "Yearly:"
  puts y.each_slice(5).map { |a| a.join(" ") }
  puts
  puts "Monthly:"
  puts m.each_slice(5).map { |a| a.join(" ") }
  puts
  puts "Weekly:"
  puts w.each_slice(4).map { |a| a.join(" ") }
  puts
  puts "Daily:"
  puts d.each_slice(5).map { |a| a.join(" ") }
end
