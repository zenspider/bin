#!/usr/bin/perl5 -w

use diagnostics;
use strict;

############################################################
# $Log: nuke,v $
# Revision 1.1  1998/11/26 08:41:21  ryand
# Initial revision
#
# Revision 1.1.1.1  1998/09/14 22:04:47  ryand
# Imported sources
#
# Revision 1.8  1997/12/30 21:52:00  ryand
# Fixed pathing, use diagnostics, fixed perl5 warnings.
#
# Revision 1.7  1997/10/14 17:39:02  ryand
# Updated for perl5
#
# Revision 1.6  1997/02/03 06:47:19  ryand
# Updated for perl 5
#
# Revision 1.5  1997/01/29 00:41:18  ryand
# Removed cvs id and revisions variables from code (I wasn't using them in
# the first place, just thought it was cool).
#
# Revision 1.4  1997/01/29 00:08:57  ryand
# Fixed stupid problem w/ cvs log
#
# Revision 1.3  1997/01/29 00:06:44  ryand
# Added multiple signal capabilities.
# Revision 1.2  1997/01/29 00:00:54  ryand
# Added multiple pattern nuking capabilities.
# Revision 1.1  1997/01/28 23:53:40  ryand
# Added version 1.0 of nuke to repository.
############################################################

my($cmd) = "ps -u $ENV{'LOGNAME'}";

sub usage {

  print "Usage: $0 < {-s<#|name>} pattern>+\n";
  print "\tEvery process matching <pattern> will be nuked\n";
  print "\tIf you specify an optional signal number or name,\n";
  print "\tthen that will be used for those patterns\n";
}

if ($#ARGV == -1) {
  &usage;
  die "Incorrect number (".($#ARGV+1).") of arguments";
}

my($pattern);
my($signal) = 'TERM';

PATTERN: while ($pattern = shift @ARGV) {

  if ($pattern =~ m/^-(.+)/) {
    $signal = $1;
    next PATTERN;
  }

  my(@killList) = ();
  open PS, "$cmd|"
    or die "Couldn't open $cmd\n for read";

  while (defined($_ = <PS>)) {
    next unless m/$pattern/;
    chomp;
    s/^\s*(\d+).*$/$1/;
    push (@killList, $_);
  }

  if (@killList) {
    print "kill $signal, ". join(" ", @killList), "\n";
    kill $signal, @killList if @killList;
  } else {
    print STDERR "$0: $pattern not found\n";
  }
}
