# -*- shell-script -*-
#set -xv

############################################################
# Overrides:
############################################################

if [ -n "${PS1-}" ]; then
  # interactive shell
  
  fix_ssh_agent () {
    export SSH_AUTH_SOCK=$(find /tmp/ssh-* -user `whoami` -name agent\* | tail -n 1)
  }

  pts () 
  { 
      echo "$*" | parse_tree_show
  }

  # Gives the absolute pathname for any path argument
  abs() {
    set -P
    
    local target="${1-.}"
    if [ -f "$target" ] || [ ! -e "$target" ]; then
      dir=$(dirname "$target");
      file=$(basename "$target");
    else
      dir="$target"
      file=''
    fi
    
    pushd "$dir" &> /dev/null
    echo "$PWD/$file"
    popd &> /dev/null
  }
  
  # Gives the pwd
  pwd() {
    local target=$(abs "$@");
    
    
    if [ -f "$target" ]; then
      echo $(dirname "$target");
    else
      echo "$target"
    fi
  }

  xtitle() {
    # can't find binary xtitle
    if [ $TERM = 'xterm' ]; then
      [ "$2" ] && echo -ne "\033]2;$1\a\033]1;$2\a" || echo -ne "\033]0;$1\a"
    fi
  }
  
  if [ ! -z "${TERM-}" ]; then
    case $TERM in
      
      "xterm" )
	# this alias puts the host name and pwd in the xterm header
	cd() {
	  local dir=${1-}
	  builtin cd $dir
	  xtitle "$(hostname) @ ${PWD#/tmp_mnt}" $(hostname)
        }
	cd .
	;;
      
      * )
	  # no cd alias
	  ;;
    esac
  fi

  type () {
	  
    local fail=0
    
    if [ $# -eq 0 ] ; then
      echo 'usage: whatis arg [arg...]'
      return 1
    fi
    
    for arg; do
      case $(builtin type -type $arg 2>/dev/null) in
	"alias")
           builtin alias "$arg"
	   ;;
	"function")
           builtin type "$arg" | sed 1d
	   ;;
	"builtin")
           echo builtin "$arg"
	   ;;
	"file")
           builtin type -path "$arg"
	   ;;
	*)
	   # OK, we could have a variable, or we could have nada.
	   if [ "$(eval echo \${$arg+set})" = "set" ] ; then
	     # It is a variable, and it is set.
	     echo -n "$arg="
	     eval echo '\"'\$$arg'\"'
	   else
	     echo whatis: $arg: not found
	     fail=1
	   fi
	   ;;
      esac
    done
    return $fail
  }
fi
  
############################################################
# Machine Dependant Aliases:
############################################################

alias ps-all='ps auxww'
alias DU='du -k'

case "${HOSTTYPE}.${OSTYPE}" in
  
  "alpha.OSF1" | "alphaev56.osf4.0d" )
    alias ps-all='ps aux'
    ;;

  "sparc.sunos" )
    alias ps-all='ps -ef'
    alias DU='du -a'
    ;;
  
  "hp.hpux" )
    alias ps-all='ps -ef'
    ;;
  
  "powerpc.aix" )
    alias ps-all='ps -ef'
    ;;

  "powerpc.freebsd" )
    alias ps-all='ps -ef'
    ;;
  
  "sparc.solaris" )
    alias ps-all='ps -ef'
    ;;

  "sgi.Irix6" )
    alias ps-all='ps -ef'
    ;;

  i386.[Ff]ree[Bb][Ss][Dd]*)
    alias ps-all='ps aux'
    ;;

  i[3456]86.[Ll]inux* )
    alias ps-all='ps -ef'
    ;;

  *darwin* )
    alias ps-all='ps auxww'
    ;;

  *)
    echo "$0:${HOSTTYPE}.${OSTYPE} is an unknown machine type"
    ;;
esac

############################################################
# General Aliases:
############################################################

alias aoeu="echo switching to qwerty; xmodmap ~/.xmodmap.qwerty"
alias asdf="echo switching to dvorak; xmodmap ~/.xmodmap.dvorak"
alias clean='DU -a . | sort -rn | ${PAGER-more}'
alias cpu='ps -axo ruser,pid,pcpu,command | sort -drn -k 3 | ${PAGER-more}'
alias cpumem='ps -axo ruser,pid,pmem,command | sort -drn -k 3 | ${PAGER-more}'
alias cputime='ps -axo ruser,pid,cputime,command | sort -dr -k 3 | ${PAGER-more}'
alias emacs="/MyApplications/Emacs.app/Contents/MacOS/Emacs -nw"
alias icloud="scutil --dns | grep icloud | sed -n 's/.* : *\(.*\)$/\1/p'"
alias lc='wc -l'
alias lpr2up='enscript -2r'
alias math="/MyApplications/Mathematica.app/Contents/MacOS/MathKernel"
alias newshell='env -i $SHELL --norc'
alias rsyncmv="rsync --remove-source-files"

dict () {
    egrep -i "$@" /usr/share/dict/words
}

############################################################
# General Functions:
############################################################

ff () {
    find . -name .svn -prune -o -type f -print0 | xargs -0 egrep "$@"
}

fff () {
    c=
    e=
    type=
    while true; do
        case "$1" in
            -f) type="-type f"      ;;
            -d) type="-type d"      ;;
            -a) type=               ;;
            -c) type="-type d"; c=1 ;;
            -e)
                shift
                e="$1"
                ;;
            --) break               ;;
            *) break                ;;
        esac
        shift
    done

    if [ -n "$c" ]; then
        cd $(find . $type -print0 | egrep -z "$@" | head -1)
        echo $PWD
    elif [ -z "$e" ]; then
        find . $type | egrep "$@"
    else
        find . $type -print0 | egrep -zZ "$@" | xargs -0 $e
    fi
}

alias f="fff -f"
alias d="fff -d"
alias c="fff -c"
alias e="fff -f -e 'emacsclient -n'"

mdf () {
    mdfind -onlyin $PWD "$@"
}

mdfn () {
    mdfind -onlyin $PWD "kMDItemFSName == $@"
}

alias git=hub

fc () {
    find . -name .svn -prune -o -type f -print0 | xargs -0 egrep -c "$@" | grep -v :0 | sort -rn -k2 -t:
}

fp() {
    ps axc|awk "{if (\$5==\"$1\") print \$1}";
}

fact () {
	n=$1
	echo "$n[p]s2[lip/dli%0=1dvsr]s12sid2%0=13sidvsr[dli%0=1lrli2+dsi!>.]ds.xd1<2" | dc
}

psg () {
    ps-all | grep "$@"
}

mylpr () {
  pr -o4 -e4 -l60 "$@" | lpr 
}

l () {
  ls -FCs "$@" | ${PAGER-more}
}

la () {
  ls -FCsa "$@" | ${PAGER-more} 
}

unalias ll 2> /dev/null
ll () {
  ls -Fl "$@" | ${PAGER-more} 
}

lla () {
  ls -Fla "$@" | ${PAGER-more} 
}

lll () {
  ls -FlaR "$@" | ${PAGER-more}
}

lt () {
  ls -Flt "$@" | ${PAGER-more} 
}

alias html4="onsgmls -s -B -D /opt/local/share/OpenSP -c html4.soc"

nuke() {
  local pid

  pid=$(ps-grep $1|grep -E "^$USER "|grep -v "\^$USER"|awk '{ print $2 }');
  for p in $pid ; do
    echo -n "killing $1 (process $pid)..."
    kill $pid
    echo "slaughtered."
  done
}

stfu () {
    eval $* 2> /dev/null
}

term() {
  TERM=$1
  export TERM
  tset
}

alias fromto=seq

mem() {
  ps -efo rss,vsz,user,args | perl -pi -e 'if (m/^(\S+)M/) { $mem = $1 * 1024; s/^(\S+)M/${mem}K/ }; s/^(\S+)K/$1/; ' | sort -n
}

. $(gem env gemdir)/gems/ohmygems-*/ohmygems
