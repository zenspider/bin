#!/usr/bin/ruby -ws

$b ||= false
$c ||= false
$g ||= false
$h ||= false
$i ||= false
$l ||= false
$n ||= false
$o ||= false
$p ||= false
$w ||= false
$s ||= false
$x ||= false

if $h then
  puts "#{File.basename($0)} [options] [files]"
  puts "  -b - strip leading and trailing whitespace, and blanks"
  puts "  -c - cumulative percentages"
  puts "  -g - print a simple histogram"
  puts "  -h - show help"
  puts "  -i - strip ip numbers"
  puts "  -l - print the historgram logarithmically"
  puts "  -n - convert numbers to '<num>'"
  puts "  -x - convert hex numbers to '0x<num>'"
  puts "  -w - preserve whitespace as-is"
  puts "  -o - skip lines that only occur once"
  puts "  -p - add percentage values to the output"
  puts "  -s - sort by line, rather than occurance"
  exit 0
end

$p = true if $c

c = {}
c.default = 0
total = 0

ARGF.each do |line|
  $_ = line # cheating because ruby 1.9 won't let me put it in block args
  chomp

  gsub!(/0x(\d|[a-f])+/i, '0x<num>') if $x

  # regex is split this way so you get all dots or dashes, not a mix
  gsub!(/(\d+((\.\d+)*|(\-\d+)*))/) do |match|
    if match.split(/[\.-]/).size >= 4 then # IP number
      if $i then
        "<ip>"
      else
        match
      end
    else
      "<num>"
    end
  end if $n

  gsub!(/<num>x<num>/, '0x<num>') if $x

  gsub!(/\s{2,}/, ' ') unless $w

  if $b then
    $_.strip!
    next if $_.empty?
  end

  c[$_] += 1
  total += 1
end rescue nil # silence broken pipe errors

if $s then
  sorted = c.keys.sort
else
  sorted = c.keys.sort { |a,b| c[b] <=> c[a] }
end

total = total.to_f

if $g then
  max_s = c.keys.map { |s| s.size }.max
end

curr = 0.0

mag = c[sorted.first].to_s.size

sorted.each do |key|
  next if $o and c[key] == 1
  if $c then
    curr += c[key]
    printf "%#{mag}d:%5.2f%%:%s\n", c[key], curr / total * 100.0, key
  elsif $p then
    printf "%#{mag}d:%5.2f%%:%s\n", c[key], c[key] / total * 100.0, key
  elsif $g then
    n = c[key]
    n = Math.log(n) if $l
    printf "%*s: %s\n", max_s, key, "x" * n
  else
    printf "%#{mag}d: %s\n", c[key], key
  end
end rescue nil # silence broken pipe errors
