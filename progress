#!/usr/bin/env ruby -w

require "find"
require "getoptlong"

class File
  def self.binary? path
    s = (File.binread(path, 4096) || "").split(//)
    ((s.size - s.grep(" ".."~").size) / s.size.to_f) > 0.30
  end
end

class Options
  def self.process(*options)
    options = options.map { |option|
      case option
      when String then
        option = "--#{option}" unless option =~ /^--/
        [option, GetoptLong::NO_ARGUMENT]
      when Array then
        option[0] = "--#{option[0]}" unless option[0] =~ /^--/
        option << GetoptLong::NO_ARGUMENT unless Fixnum === option.last
        option
      else
        raise ArgumentError, "bad argument"
      end
    }

    result = {}
    o = GetoptLong.new(*options)
    o.each do |name, argument|
      result[name.sub(/^-+/, '').intern] = argument
    end

    result
  end
end

$option = Options.process("help", "html", "dev")
$interactive = $stdin.tty? and $stdout.tty?
$check    = []
$keywords = '\b(F IX|H ACK|T ODO|D OC|R EFACTOR|R ETIRE|W ARN)\b';
$ignore   = '(\.(log|diff)|~)'
$prune    = 'CVS|\.svn|blib|html|vendor|tmp|\.git|\.site|node_modules'
$hit      = Hash.new { |h,k| h[k] = [] }
$word     = Hash.new(0)
$total    = 0
$html     = false;

def find
  ARGV.push '.' if ARGV.empty?

  Find.find(*ARGV) do |f|
    if File.file? f then
      $check << f unless f =~ /#{$ignore}$/o or File.binary? f
    else
      warn "prune: #{f}" if f =~ /#{$prune}/o or File.symlink? f
      Find.prune if f =~ /#{$prune}/o or File.symlink? f
    end
  end
end

def check
  $stderr.puts "Found #{$check.length} files. Scanning..."

  $check.each_with_index { |f, count|
    begin
      IO.foreach(f) { |l|
        if (l =~ /(#{$keywords})/xo) then
          $hit[f] << "%4d: %s" % [$., l.strip]
          $word[$1] += 1
          $total += 1
        end
      }
    rescue => e
      warn "Error in #{f}: #{e.message}. Skipping"
    end

    $stderr.print('x') if count % 10 == 0
  }
  $stderr.puts "done"
end

def report

  summ = summary

  if $interactive then
    pager = ENV['PAGER'] || 'more';
    more = IO.popen pager, "w"
    oldstdout = $stdout
    $stdout = more
  end

  print "<PRE>" if $option[:html];

  puts summ

  puts
  puts "Detail:"
  puts

  $hit.sort_by { |file, hits| -hits.length }.each do |file, hits|
    puts "#{file} (#{hits.length})"
    puts
    hits.each do | hit |

      hit = hit.gsub(/&/, '&amp').gsub(/</, '&lt;').gsub(/>/, '&gt;').gsub(/(#{$keywords})/ox, '<B style="color:red">\1</B>') if $option[:html]

      puts hit
    end
    puts
  end

  puts summ

  puts "</PRE>" if $option[:html]

  if $interactive then
    $stdout = oldstdout
    more.close
  end
end

def summary
  s = []

  checkcount = $check.length
  hitcount = $hit.length

  s << "Summary:\n"
  s << "  %-24s : %4d" % ["Number of files checked", checkcount]
  s << "  %-24s : %4d (%4.2f%%)" % ["Number of files marked", hitcount, hitcount / checkcount * 100]
  s << "  %-24s : %4d" % ["Number of tags found", $total]

  if (hitcount > 0) then
    s << "  %-24s : %7.2f" % ["Tags per infected file", $total.to_f / hitcount]
    s << "  %-24s : %7.2f" % ["Tags per all files", $total.to_f / checkcount]
  end

  s << ''
  s << 'Occurances:'
  $word.sort_by { |k,v| -v}.each { |word,count|
    s << "%4d: %s" % [count, word]
  }
  s << ''

  return s.join("\n")
end

find
check
report
exit
